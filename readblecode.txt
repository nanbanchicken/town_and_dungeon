プログラミング本感想戦 #01(趣味のプログラミング #65)
課題図書: リーダブルコード
配信: https://youtu.be/pxiewFQ1zKY

メモ 230ページあるよ

よみやすいよ！
章の最後にまとめがあるよ
本の作り自体がリーダブル！

章立て
1. 理解しやすいコード
　イントロダクション！
　この本は何のために読むの？が書いてある

2. 名前に情報を詰め込む
　変数、関数など意味のある名前を付けよう！
　似た意味でもニュアンスを考えて名前を付けないと誤解を生むかも・・・
　エディタの頭がいいので変数名が少し長くなっても大丈夫！

　歴史的に変数名の文字数が制限されていた時代の影響もあるかも？

3. 誤解されない名前
　lastとendは以下？まで？ニュアンスは難しい
　「read_xx」読んだ？読んでる？(過去分詞)どっちなんだい？
　「getXX」は軽い処理だと思われがち
　適切な名前なのか候補いくつか挙げて考えてみよう

4. 美しさ
　汚いものには近寄りたくない
　インデントや位置を揃えると見やすい -> 把握しやすい

　インデントをそろえる
public Hoge(){
    var a = new Piyo();
}

public Hoge(){
    var x = new Piyo(aaaaaaa, bbbbbbbb, ccccc);

    var x = new Piyo(
        このコメントはマウスオーバーすれば引数の意味を見られるので冗長かも？
        aaaaaaaa, /* aの意味 */
        bbbb,     /* bの意味 */
        ccc       /* cの意味 */
                 ^^^コメントのスタート位置もそろえると見やすい
    );

    var x = new Piyo(
        長さの変数1, 長さの変数2,
        時間の変数1);
        /* 種別？で分けてみる */
}

　おまけ
　　深いネストや条件分岐は決定表で表現すると便利？

5. コメントすべきことを知る
　コメントすべき「ではない」ことがある

　書かないよりは書く
　でも書きすぎない
　　たくさん書かれるとコードを読む時間が増える
　
　なぜ？どうして？のコードを読んでもわからないことをコメントとして書く

　コードと違うことを書かない
　　例えば関数の内容を変更したのに、コメントがそのままになっていて食い違う
　　食い違うようなコメントを書かないほうがいい

6. コメントは正確で簡潔に
　　正確に：あいまいな表現をしない、具体的に書く
　　簡潔に：コードの内容を書かない、意図を書く

　おまけ
　メールとプログラミングは似てる！？
　　始めに大切なこと、伝えたいこと、結論や条件を書いて、内容は後で伝える(コードに語らせる)

第II部　ループとロジックの単純化
　7,8,9章
　ネストは浅くしよう！

第III部 コードの再構成
　10,11,12,13章

10. 無関係の下位問題を抽出する
　本質的に関係のない問題はスコープを小さくする？
　ニュアンスが伝わらないので読んで！

11. 一度に一つのことを
　複数の異なる作業を1つの関数(やクラス)でやらない
　適切な単位で分割してあげる
　　分割しすぎてもダメ・・・適切が大切

12. コードに思いを込める
　ライブラリに目を通そう
　　細かくコードを追う必要はあまりない
　　大まかにどんな関数があるかくらいは知っておくとよい

　車輪の再開発をしない
　　ライブラリのソート機能と自分で作ったソート機能だとライブラリのソート機能の方が早かったりする
　　でもほしい機能がライブラリの機能と合致していない場合は自作する方がいいときもある

13. 短いコードを書く

14. テストと読みやすさ
　テストのサンプルコードに8つの問題が含まれている！？
　　2つしか見つけらませんでした・・・by南蛮

15. 「分/時間カウント」を設計・実装する

解説
　急に身につくものではないので、継続的に取り組んでいこう！
　たまに昔のコードを読むと成長が感じられていいぞ！